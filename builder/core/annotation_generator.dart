import 'dart:io';
import 'package:dart_style/dart_style.dart';

class AnnotationGenerator {
  String generateAnnotationsFile() {
    final buffer = StringBuffer();
    
    // Header comment
    buffer.writeln('// GENERATED CODE - DO NOT MODIFY BY HAND');
    buffer.writeln('// Generated by builder.dart at ${DateTime.now()}');
    buffer.writeln();

    // Annotation classes
    buffer.writeln(_generateToStringAnnotation());
    buffer.writeln(_generateEqualityAnnotation());
    buffer.writeln(_generateJsonSerializableAnnotation());
    buffer.writeln(_generateCopyWithAnnotation());
    buffer.writeln(_generateImmutableAnnotation());
    buffer.writeln();

    // Convenience constants
    buffer.writeln(_generateConvenienceConstants());

    try {
      final formatter = DartFormatter();
      return formatter.format(buffer.toString());
    } catch (e) {
      print('‚ö†Ô∏è  Warning: Could not format annotations file: $e');
      return buffer.toString();
    }
  }

  String _generateToStringAnnotation() {
    return '''
/// Annotation to generate toString method for a class
class GenerateToString {
  const GenerateToString();
}''';
  }

  String _generateEqualityAnnotation() {
    return '''
/// Annotation to generate equality (== and hashCode) methods for a class
class GenerateEquality {
  const GenerateEquality();
}''';
  }

  String _generateJsonSerializableAnnotation() {
    return '''
/// Annotation to generate JSON serialization methods
class JsonSerializable {
  final bool explicitToJson;
  final bool includeIfNull;

  const JsonSerializable({
    this.explicitToJson = false,
    this.includeIfNull = true,
  });
}''';
  }

  String _generateCopyWithAnnotation() {
    return '''
/// Annotation to generate a copyWith method for a class
class GenerateCopyWith {
  const GenerateCopyWith();
}''';
  }

  String _generateImmutableAnnotation() {
    return '''
/// Annotation to mark a class as immutable and generate const constructor
class Immutable {
  const Immutable();
}''';
  }

  String _generateConvenienceConstants() {
    return '''
// Convenience constants for common use
const generateToString = GenerateToString();
const generateEquality = GenerateEquality();
const jsonSerializable = JsonSerializable();
const generateCopyWith = GenerateCopyWith();
const immutable = Immutable();''';
  }

  void writeAnnotationsFile(String outputPath) {
    final content = generateAnnotationsFile();
    File(outputPath).writeAsStringSync(content);
    print('üìÑ Generated annotations: $outputPath');
  }
}