import 'dart:io';
import 'package:dart_style/dart_style.dart';
import '../annotations/registry.dart';

class AnnotationGenerator {
  final AnnotationRegistry _registry;

  AnnotationGenerator(this._registry);
  String generateAnnotationsFile() {
    final buffer = StringBuffer();

    // Header comment
    buffer.writeln('// GENERATED CODE - DO NOT MODIFY BY HAND');
    buffer.writeln('// Generated by builder.dart at ${DateTime.now()}');
    buffer.writeln();

    // Annotation classes (generated from registry)
    for (final processor in _registry.processors) {
      buffer.writeln(_generateAnnotationClass(processor.annotationName));
      buffer.writeln();
    }

    // Convenience constants (generated from registry)
    buffer.writeln(_generateConvenienceConstants());

    try {
      final formatter = DartFormatter();
      return formatter.format(buffer.toString());
    } catch (e) {
      print('‚ö†Ô∏è  Warning: Could not format annotations file: $e');
      return buffer.toString();
    }
  }

  String _generateAnnotationClass(String annotationName) {
    // Special handling for JsonSerializable
    if (annotationName == 'JsonSerializable') {
      return '''
/// Annotation to generate JSON serialization methods
class JsonSerializable {
  final bool explicitToJson;
  final bool includeIfNull;

  const JsonSerializable({
    this.explicitToJson = false,
    this.includeIfNull = true,
  });
}''';
    }

    return '''
class $annotationName {
  const $annotationName();
}''';
  }

  String _generateConvenienceConstants() {
    final buffer = StringBuffer();
    buffer.writeln('// Convenience constants for common use');

    for (final processor in _registry.processors) {
      // Use the first alias as the constant name, if available
      if (processor.annotationAliases.isNotEmpty) {
        final constantName = processor.annotationAliases.first;
        final className = processor.annotationName;
        buffer.writeln('const $constantName = $className();');
      }
    }

    return buffer.toString().trim();
  }

  void writeAnnotationsFile(String outputPath) {
    final content = generateAnnotationsFile();
    File(outputPath).writeAsStringSync(content);
    print('üìÑ Generated annotations: $outputPath');
  }
}
