// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by builder.dart at 2025-09-16 14:24:21.688604

// ignore_for_file: unused_import
import 'models/category.dart';
import 'models/product.dart';
import 'models/user.dart';

extension ProductJson on Product {
  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['id'] = id;
    map['name'] = name;
    map['price'] = price;
    if (description != null) map['description'] = description;
    map['category'] = category.toJson();
    return map;
  }

  static Product fromJson(Map<String, dynamic> json) {
    return Product(
        id: json['id'] as String,
        name: json['name'] as String,
        price: json['price'] as double,
        description: json['description'] as String?,
        category: CategoryJson.fromJson(json['category']));
  }
}

extension ProductToString on Product {
  String toStringGenerated() {
    return 'Product(id: $id, name: $name, price: $price, description: $description, category: $category)';
  }
}

extension ProductCopyWith on Product {
  Product copyWith(
      {String? id,
      String? name,
      double? price,
      String? description,
      Category? category}) {
    return Product(
        id: id ?? this.id,
        name: name ?? this.name,
        price: price ?? this.price,
        description: description ?? this.description,
        category: category ?? this.category);
  }
}

extension UserToString on User {
  String toStringGenerated() {
    return 'User(name: $name, age: $age, email: $email, isActive: $isActive)';
  }
}

extension UserEquality on User {
  bool isEqualTo(Object other) {
    if (identical(this, other)) return true;
    return other is User &&
        name == other.name &&
        age == other.age &&
        email == other.email &&
        isActive == other.isActive;
  }

  int get generatedHashCode => Object.hash(name, age, email, isActive);
}

extension UserJson on User {
  Map<String, dynamic> toJson() {
    return {'name': name, 'age': age, 'email': email, 'isActive': isActive};
  }

  static User fromJson(Map<String, dynamic> json) {
    return User(
        name: json['name'] as String,
        age: json['age'] as int,
        email: json['email'] as String,
        isActive: json['isActive'] as bool);
  }
}

extension UserCopyWith on User {
  User copyWith({String? name, int? age, String? email, bool? isActive}) {
    return User(
        name: name ?? this.name,
        age: age ?? this.age,
        email: email ?? this.email,
        isActive: isActive ?? this.isActive);
  }
}

extension CategoryJson on Category {
  Map<String, dynamic> toJson() {
    return {'id': id, 'name': name, 'description': description};
  }

  static Category fromJson(Map<String, dynamic> json) {
    return Category(
        id: json['id'] as String,
        name: json['name'] as String,
        description: json['description'] as String?);
  }
}

extension CategoryToString on Category {
  String toStringGenerated() {
    return 'Category(id: $id, name: $name, description: $description)';
  }
}

extension CategoryCopyWith on Category {
  Category copyWith({String? id, String? name, String? description}) {
    return Category(
        id: id ?? this.id,
        name: name ?? this.name,
        description: description ?? this.description);
  }
}

/// Global initializer function that calls all initialize() methods
/// and executes their optional callbacks after initialization
void builderInitializer() {
  final callbacks = <Function()>[];

  // Call all initialize methods and collect callbacks
  final productCallback = Product.initialize();
  if (productCallback != null) callbacks.add(productCallback);

  final userCallback = User.initialize();
  if (userCallback != null) callbacks.add(userCallback);

  // Execute all callbacks after initialization
  for (final callback in callbacks) {
    callback();
  }
}
